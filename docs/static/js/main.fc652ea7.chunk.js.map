{"version":3,"sources":["components/kittehImages.js","App.js","serviceWorker.js","index.js"],"names":["KittehImages","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","pictures","fetch","headers","x-api-key","then","results","json","data","map","cat","react_default","a","createElement","key","url","alt","src","height","width","_this2","setState","console","log","catch","err","error","className","href","Component","App","kittehImages","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"kSAiFeA,cA1EX,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACVC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QACMI,MAAQ,CACTC,SAAU,IAHLR,sMAYVS,MAAM,6CAA8C,CAChDC,QAAS,CACLC,YAAa,0CAGpBC,KAAK,SAAAC,GACF,OAAOA,EAAQC,OACdF,KAAK,SAAAG,GACF,IAAIP,EAAWO,EAAKC,IAAI,SAACC,GAErB,OAIIC,EAAAC,EAAAC,cAAA,OAAKC,IAAKJ,EAAIK,KACVJ,EAAAC,EAAAC,cAAA,OAAKG,IAAI,GAAGC,IAAKP,EAAIK,IAAKG,OAAO,MAAMC,MAAM,WASzDC,EAAKC,SAAS,CAAEpB,SAAUA,IAE1BqB,QAAQC,IAAI,QAASH,EAAKpB,MAAMC,YAEnCuB,MAAM,SAAAC,GACHH,QAAQI,MAAMD,KAErBD,MAAM,SAAAC,GACHH,QAAQI,MAAMD,qIASlB,OACId,EAAAC,EAAAC,cAAA,OAAKc,UAAU,aACXhB,EAAAC,EAAAC,cAAA,OAAKc,UAAU,OACXhB,EAAAC,EAAAC,cAAA,OAAKc,UAAU,4CACfhB,EAAAC,EAAAC,cAAA,KAAGe,KAAK,KAAKD,UAAU,QAAvB,oBAEAhB,EAAAC,EAAAC,cAAA,OAAKc,UAAU,wDAEb/B,KAAKI,MAAMC,mBAjEN4B,aCcZC,mLATb,OACEnB,EAAAC,EAAAC,cAAA,OAAKc,UAAU,OACfhB,EAAAC,EAAAC,cAACkB,EAAD,cALcF,aCOEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OAAO3B,EAAAC,EAAAC,cAAC0B,EAAD,MAASC,SAASC,eAAe,SDwH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvC,KAAK,SAAAwC,GACjCA,EAAaC","file":"static/js/main.fc652ea7.chunk.js","sourcesContent":["import React,{ Component } from \"react\";\n\n\nclass KittehImages extends Component {\n\n    /*lifecycle part one*/\n  \n    constructor() {  //remember that a constructor is used to build things\n        super();\n         this.state = {\n             pictures: [], /*We want our retrieved images in an empty array, \n                            this will be the first state (state is like water, \n                            it can change in form) */\n        };\n     }\n\n      /*lifecycle part two*/\n   \n    async componentDidMount() { //lifecycle method\n        fetch(\"https://api.thecatapi.com/v1/images/search\", {  //\n            headers: {\n                \"x-api-key\": \"2c3c09ea-a104-4523-beec-038ac78a354f\",\n            }\n        }) //accesses api (fetch) \n        .then(results => {\n            return results.json()\n            .then(data => {\n                let pictures = data.map((cat) => { \n                    /*this will map(sort through and find) over data and retrieve what we want*/\n                    return( /*key is used to set the key to pic result, \n                        ensures the dom correponds with the data object. \n                        Helps react know when to indentify a state change.\n                        Keys always should be given if addings elements into an array*/ \n                        <div key={cat.url}>  \n                            <img alt=\"\" src={cat.url} height=\"60%\" width=\"60%\"></img> \n                        </div>\n \n            \n                    )\n                }) //returns the data formatted in json\n      \n                /*lifecycle part three*/\n\n                this.setState({ pictures: pictures }); /* here we are altering state, from the empty array in\n                part one to the pictures recieved from the api in part two*/\n                console.log(\"state\", this.state.pictures )  \n            })\n            .catch(err => {\n                console.error(err); // if using promise (defining what is gonna happen), always use catch error\n            })\n        .catch(err => {\n            console.error(err);\n        })\n\n    })\n}\n/*lifecycle part four*/   \n/*render to dom*/ \n                 \n    render() {\n        return(\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col-12 align-self-center mx-auto d-block\">\n                    <a href=\"./\" className=\"text\">Fluffeh Kittehs</a>\n                    </div>\n                    <div className=\"col-12 align-self-center mx-auto d-block kittehImage\">\n            \n                     {this.state.pictures}\n                     \n           \n            </div>\n            </div>\n            </div>\n        )\n    }\n\n}\n\n   \n\nexport default KittehImages; ","import React, { Component } from 'react';\nimport \"./app.css\";\nimport KittehImages from \"./components/kittehImages\";\n\n\nclass App extends Component {\n\n  render() {\n  return (\n    <div className=\"App\">\n    <KittehImages  />\n   \n    </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}